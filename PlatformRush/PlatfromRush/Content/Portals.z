class Portals : ZilchComponent
{

    var CanPortal : Boolean = true;
    var Id : Real= 0.0;
    var LinkPortal : Cog = null;
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        //this.Id = this.Owner.Sprite.Color.X + this.Owner.Sprite.Color.Y + this.Owner.Sprite.Color.Z + this.Owner.Sprite.Color.W;
        this.FindOtherPortal();
    }

    function FindOtherPortal()
    {
        var listofObjects = this.Space.FindAllObjectsByName("Portal");
        foreach(var portal in listofObjects)
        {
            portal.Portals.Id = portal.Sprite.Color.X + portal.Sprite.Color.Y + portal.Sprite.Color.Z + portal.Sprite.Color.W;
            if(portal.Portals.Id == this.Id)
            {
                if(this.Owner != portal)
                {
                this.LinkPortal = portal;
                }
            }
        }
    }

    function SetCanPortal(boolean: Boolean)
    {
        this.CanPortal = boolean;
    }

    function OnCollisionStarted(collisionEvent : CollisionEvent)
    {
        var otherObject = collisionEvent.OtherObject;
        if(otherObject.Name != "Ghost")
        {
        //replace with player controller
        //var player = otherObject.PlayerController;
        if(this.CanPortal == true)
        {
            
                
                this.LinkPortal.Portals.SetCanPortal(false);
                otherObject.Transform.Translation = this.LinkPortal.Transform.Translation;
            
        }
        }
    }
    
    
    
    function OnCollisionEnded(event : CollisionEvent)
    {
        //when the player finishes its collision change back 
       this.SetCanPortal(true);
    }
}
