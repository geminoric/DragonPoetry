class Controls : ZilchComponent
{
    var Movement : Real3 = Real3(0.0, 0.0, 0.0);
    var Scale : Real3 = Real3(0.0, 0.0, 0.0);
    
    // Whether or not the player has pressed a button
    var Pressed : Boolean = false;
    var Ablity : Integer = 0;
    
    // Max time for JumpsLeft cooldown
    var MaxCD : Real = 60;
    var CurrentCD : Real = 0;
    var RateCD : Real = 0.5;
    var OnCD : Boolean = false;
    
    var Stretch : Boolean = true;
    var MaxStretch : Integer = 6;
    var MinStretch : Integer = 1;
    var DashSpeed : Integer = 40;
    var Direction : Integer = 1;
    var Right : Integer = 1;
    var Left : Integer = -1;
    
    // Whether or not the player has jumped 
    var Jumped : Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollision);
    }
    
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.PlayerInput();
        
        if(this.Ablity == 0)
        {
            this.Owner.RigidBody.Velocity = this.Movement;
        }
        if(this.Ablity == 1)
        {
            this.OnCD = false;
            this.CurrentCD = this.MaxCD;
            this.DashStretch(this.Direction);
            this.Owner.Transform.Scale = this.Scale;
            this.Owner.RigidBody.Velocity = this.Movement;
            if(this.Owner.Transform.Scale.X >= this.MaxStretch)
            {
                this.Stretch = false;
            }
            if(this.Owner.Transform.Scale.X <= this.MinStretch)
            {
                this.Scale.X = this.MinStretch;
                this.Owner.Transform.Scale = this.Scale;
                this.Stretch = true;
                this.Ablity = 0;
            }
        }
        if(this.Ablity == 2)
        {
            
        }
        
        
        if(this.OnCD == true)
        {
            this.CurrentCD -= this.RateCD;
            
            if(this.CurrentCD <= 0)
            {
                this.OnCD = false;
            }
        }
        Console.WriteLine(this.Jumped);
    }
    
    function OnCollision(event : CollisionEvent)
    {
        var otherObj = event.OtherObject;
        if(this.Owner.RigidBody.Velocity.Y == 0)
        {

            
        if(otherObj.BoxCollider != null)
        {
            if(otherObj.BoxCollider.Ghost == false)
            {
                
                var stop = this.Owner.RigidBody.Velocity;
                stop.Y =  0;
                this.Owner.RigidBody.Velocity = stop;
            }
        }
        
        if(otherObj.SphereCollider != null)
        {
            if(otherObj.SphereCollider.Ghost == false)
            {
                var stop = this.Owner.RigidBody.Velocity;
                stop.Y =  0;
                this.Owner.RigidBody.Velocity = stop;
            }
        }
    
    }
    }
    
    function PlayerInput()
    {
        // The change in movement we will apply to the player
        var movement = this.Owner.RigidBody.Velocity;
        
        var speed = 10;
        
        // Move left when A is down
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            // Set movement to 1 unit towards the left
            movement.X = -1.0;
            
            // Make the sprite face left
            this.Owner.Sprite.FlipX = true;
            // Let the Controller know an action has been taken
            this.Pressed = true;
        }
        
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            // Set movement to 1 unit towards the right
            movement.X = 1.0;
            
            // Make the sprite face right
            this.Owner.Sprite.FlipX = false;
            // Let the Controller know an action has been taken
            this.Pressed = true;
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Space) && (this.Jumped == 0.0 || this.Jumped == 2.0))
        {
            movement.Y = 15.0;
            
            if(this.Jumped == 2.0)
            {
                this.Jumped = 1.0;
            }
            
            if(this.Jumped == 0.0)
            {
                this.Jumped = 2.0;
            }
        }
        
        // Once Hit the ground, let you jump again.
        if((movement.Y > -0.01 && movement.Y < 0.01) && this.Jumped == 1.0)
        {
            this.Jumped = 0.0;
            movement.Y = 0.0;
        }
        
        // Use Dash JumpsLeftity
        if(Zero.Keyboard.KeyIsPressed(Keys.Shift) && this.OnCD == false)
        {
            if(this.Owner.Sprite.FlipX == true)
            {
                // Let the Controller know an action has been taken
                this.Pressed = true;
                
                // Let the Controller know your JumpsLeft has been used
                this.Ablity = 1;
                
                // Let the Controller know which direction you ar facing
                this.Direction = this.Left;
            }
            else
            {
                // Let the Controller know an action has been taken
                this.Pressed = true;
                
                // Let the Controller know your JumpsLeft has been used
                this.Ablity = 1;
                
                // Let the Controller know which direction you ar facing
                this.Direction = this.Right;
            }
        }
        
        if(this.Pressed == false)//&& this.LevelSettings.PlayerVars.Hazard == false)
        {
            movement.X = 0.0;
        }
        
        this.Pressed = false;
        
        movement.X *= 10;
        
        this.Movement = movement;
        
    }
    
    function DashStretch(dir : Integer)
    {
            if(this.Stretch == true)
            {
                this.Scale = this.Owner.Transform.Scale;
                
                this.Scale.X += 1.0;
            }
            else
            {
                this.Scale = this.Owner.Transform.Scale;
                this.Scale.X -= 1.0;
                
                if(dir == this.Left)
                {
                    this.Movement.X = -this.DashSpeed;
                }
                else
                {
                    this.Movement.X = this. DashSpeed;
                }
            }

    }
    
    function PoundStretch()
    {
        
    }
    
}