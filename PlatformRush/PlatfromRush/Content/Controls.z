class Controls : ZilchComponent
{
    var Movement : Real3 = Real3(0.0, 0.0, 0.0);
    var Scale : Real3 = Real3(0.0, 0.0, 0.0);
    
    // Whether or not the player has pressed a button
    var Pressed : Boolean = false;
    var Ablity : Integer = 0;
    
    // Max time for JumpsLeft cooldown
    var MaxCD : Real = 60;
    var CurrentCD : Real = 0;
    var RateCD : Real = 0.5;
    var OnCD : Boolean = false;
    
    var Stretch : Boolean = true;
    var MaxStretch : Integer = 6;
    var MinStretch : Integer = 1;
    var DashSpeed : Integer = 40;
    var Direction : Integer = 1;
    var Right : Integer = 1;
    var Left : Integer = -1;
    
    // Whether or not the player has jumped 
    var Jumped : Real = 0.0;
    var JumpingTimer : Integer = 0;
    var JumpingTimerMax : Integer = 25;
    
    var GPPhase : Integer = 0;
    var GPTimer : Integer = 0;
    var GPTimerMax : Integer = 15;
    
    var ControlData : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollision);
        
        this.ControlData = Zero.ObjectStore.RestoreOrArchetype("ControlSchemeData", "SavedControlData", this.Space);
    }
    
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.PlayerInput();
        
        if(this.Ablity == 0)
        {
            this.Owner.RigidBody.Velocity = this.Movement;
        }
        if(this.Ablity == 1)
        {
            this.OnCD = false;
            this.CurrentCD = this.MaxCD;
            this.DashStretch(this.Direction);
            this.Owner.Transform.Scale = this.Scale;
            this.Owner.RigidBody.Velocity = this.Movement;
            if(this.Owner.Transform.Scale.X >= this.MaxStretch)
            {
                this.Stretch = false;
            }
            if(this.Owner.Transform.Scale.X <= this.MinStretch)
            {
                this.Scale.X = this.MinStretch;
                this.Owner.Transform.Scale = this.Scale;
                this.Stretch = true;
                this.Ablity = 0;
            }
        }
        if(this.Ablity == 2)
        {
            this.PoundStretch();
            
            if ( this.GPPhase == 1 || this.GPPhase == 3)
            {
                if ( this.GPTimer > 0 )
                {
                    --this.GPTimer;
                }
                else if ( this.GPTimer == 0 )
                {
                    ++this.GPPhase;
                }
            }
            
            if ( this.GPPhase == 2 )
            {
                this.Owner.RigidBody.Velocity = Real3(0.0, 25.0, 0.0);
                this.GPPhase = 3;
                this.GPTimer = this.GPTimerMax + 10;
            }
            
            if ( this.GPPhase == 4 )
            {
                this.Owner.RigidBody.Velocity = this.Owner.RigidBody.Velocity;
            }
            
          //  Console.WriteLine("GROUNDPDFING");
        }
        
        
        if(this.OnCD == true)
        {
            this.CurrentCD -= this.RateCD;
            
            if(this.CurrentCD <= 0)
            {
                this.OnCD = false;
            }
        }
        
        if(this.Owner.RigidBody.Velocity.Y < 0 && (this.Owner.RigidBody.Velocity. X != 0 || this.Pressed == false))
        {
           // this.Owner.PlayerAnimations.ChangeState(AnimationState.Jumping);
        }
        //Console.WriteLine(this.Owner.RigidBody.Velocity);
        
                    
        if ( this.JumpingTimer > 1 )
        {
            --this.JumpingTimer;
        }
        else if ( this.JumpingTimer == 1 )
        {
            this.JumpingTimer = 0;
            if ( this.Ablity != 2 )
            {
                this.Owner.PlayerAnimations.ChangeState(AnimationState.InAir);
            }
        }
    }
    
    function OnCollision(event : CollisionEvent)
    {
        /*var stop =  this.Owner.RigidBody.Velocity;
        stop.Y = 0.0;
        this.Owner.RigidBody.Velocity = stop;*/
        
        
        var otherObj = event.OtherObject;
        if(otherObj.TileMap !=null)
        {
              var stop = this.Owner.RigidBody.Velocity;
                    stop.Y =  0;
                    this.Owner.RigidBody.Velocity = stop;
        }
        
        if(this.Owner.RigidBody.Velocity.Y == 0)
        {
            
            if(otherObj.BoxCollider != null)
            {
                if(otherObj.BoxCollider.Ghost == false)
                {
                    
                    var stop = this.Owner.RigidBody.Velocity;
                    stop.Y =  0;
                    this.Owner.RigidBody.Velocity = stop;
                }
            }
            
            if(otherObj.SphereCollider != null)
            {
                if(otherObj.SphereCollider.Ghost == false)
                {
                    var stop = this.Owner.RigidBody.Velocity;
                    stop.Y =  0;
                    this.Owner.RigidBody.Velocity = stop;
                }
            }
        }
    }
    
    function PlayerInput()
    {
        // The change in movement we will apply to the player
        var movement = this.Owner.RigidBody.Velocity;
        
        var speed = 10;
        
        // Move left when A is down
        if(Zero.Keyboard.KeyIsDown(this.ControlData.ControlScheme.MoveLeft))
        {
            // Set movement to 1 unit towards the left
            movement.X = -1.0;
            
            // Make the sprite face left
            this.Owner.Sprite.FlipX = true;
            // Let the Controller know an action has been taken
            this.Pressed = true;
            
            if ( this.Owner.PlayerAnimations.CurrentState == AnimationState.Idle )
            {
                this.Owner.PlayerAnimations.ChangeState(AnimationState.Running);
            }
        }
        else if(Zero.Keyboard.KeyIsDown(this.ControlData.ControlScheme.MoveRight))
        {
            // Set movement to 1 unit towards the right
            movement.X = 1.0;
            
            // Make the sprite face right
            this.Owner.Sprite.FlipX = false;
            // Let the Controller know an action has been taken
            this.Pressed = true;
            
            if ( this.Owner.PlayerAnimations.CurrentState == AnimationState.Idle )
            {
                this.Owner.PlayerAnimations.ChangeState(AnimationState.Running);
            }
        }
        else if ( this.Owner.PlayerAnimations.CurrentState == AnimationState.Running )
        {
            this.Owner.PlayerAnimations.ChangeState(AnimationState.Idle);
        }
        
        if(Zero.Keyboard.KeyIsPressed(this.ControlData.ControlScheme.Jump) && (this.Jumped == 0.0 || this.Jumped == 2.0))
        {
            movement.Y = 12.0;
            
            if(this.Jumped == 2.0)
            {
                this.Jumped = 1.0;
            }
            
            if(this.Jumped == 0.0)
            {
                this.Jumped = 2.0;
            }
            
            this.Owner.PlayerAnimations.ChangeState(AnimationState.Jumping);
            this.JumpingTimer = this.JumpingTimerMax;

        }
        
        // Once Hit the ground, let you jump again.
        if((movement.Y > -0.01 && movement.Y < 0.01) && (this.Jumped == 1.0 || this.Jumped == 2.0))
        {
            this.Jumped = 0.0;
            movement.Y = 0.0;
            
            if ( this.Owner.PlayerAnimations.CurrentState == AnimationState.InAir || this.Owner.PlayerAnimations.CurrentState == AnimationState.Jumping )
            {
                this.Owner.PlayerAnimations.ChangeState(AnimationState.Idle);
            }
            
            if ( this.Ablity == 2 )
            {
                this.Ablity = 0;
                this.GPPhase = 0;
            }
          //  if ( this.Owner.PlayerAnimations.CurrentState == AnimationState.GroundPounding )
           // {
           //     this.Owner.PlayerAnimations.ChangeState(AnimationState.Idle);
          //      this.Owner.Transform.RotateAnglesLocal(Real3(0.0, 0.0, Math.Pi/2));
          //  }
        }
        
        // Use Dash JumpsLeftity
        if(Zero.Keyboard.KeyIsPressed(this.ControlData.ControlScheme.Dash) && this.OnCD == false && this.Ablity == 0)
        {
            if(this.Owner.Sprite.FlipX == true)
            {
                // Let the Controller know an action has been taken
                this.Pressed = true;
                
                // Let the Controller know your JumpsLeft has been used
                this.Ablity = 1;
                
                // Let the Controller know which direction you ar facing
                this.Direction = this.Left;
            }
            else
            {
                // Let the Controller know an action has been taken
                this.Pressed = true;
                
                // Let the Controller know your JumpsLeft has been used
                this.Ablity = 1;
                
                // Let the Controller know which direction you ar facing
                this.Direction = this.Right;
            }
        }
        
        if(Zero.Keyboard.KeyIsPressed(this.ControlData.ControlScheme.GroundPound) && this.OnCD == false && this.Ablity == 0 && this.Jumped != 0.0)
        {
            this.Ablity = 2;
      //      this.Owner.PlayerAnimations.ChangeState(AnimationState.GroundPounding);
       //     this.Owner.Transform.RotateAnglesLocal(Real3(0.0, 0.0, -Math.Pi/2));
            Console.WriteLine("GP");
            this.GPPhase = 1;
            this.GPTimer = this.GPTimerMax;
        }
        if(this.Pressed == false)//&& this.LevelSettings.PlayerVars.Hazard == false)
        {
            movement.X = 0.0;
        }
        
        this.Pressed = false;
        
        movement.X *= 10;
        
        this.Movement = movement;
        
    }
    
    function DashStretch(dir : Integer)
    {
            if(this.Stretch == true)
            {
                this.Scale = this.Owner.Transform.Scale;
                
                this.Scale.X += 1.0;
            }
            else
            {
                this.Scale = this.Owner.Transform.Scale;
                this.Scale.X -= 1.0;
                
                if(dir == this.Left)
                {
                    this.Movement.X = -this.DashSpeed;
                }
                else
                {
                    this.Movement.X = this. DashSpeed;
                }
            }

    }
    
    function PoundStretch()
    {
        if ( this.GPPhase == 1 )
        {
            this.Owner.RigidBody.Velocity = Real3(0.0, 0.0, 0.0);
        }
        else if ( this.GPPhase == 3 )
        {
            this.Owner.RigidBody.Velocity = Real3(0.0, this.Owner.RigidBody.Velocity.Y - 1.5, 0.0);
        }
    }
    
}