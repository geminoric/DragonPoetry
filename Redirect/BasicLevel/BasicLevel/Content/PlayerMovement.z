class PlayerMovement : ZilchComponent
{
    function Initialize(init : CogInitializer)
    {
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //We have a place to record total movement we want to make
        var movement = local Real3 (0.0, 0.0, 0.0);
        //the rate at which we move around
        var speed = 8.0;
        //We have a place to record total rotaions we want to make
        var rotationAngles = local Real3(0.0, 0.0, 0.0);
        //Rate at which we rotate per second
        var rotationAngle = 270.0;
        //We have a direction that we are always facing
        var forwardDirection = this.Owner.Orientation.WorldForward;
        
        //OurKeyboard controlls
        //If I press the W key
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            //We move forward
            movement += forwardDirection;
        }
        //If i press the S key
        if(Zero.Keyboard.KeyIsDown(Keys.S))
        {
            //We move backwards
            movement += -forwardDirection;
        }
        //If I press the A key
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            //We rotate right
            rotationAngles.Z += Math.ToRadians(rotationAngle);
        }
        //If I press the D key
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            //We rotate left
            rotationAngles.Z -= Math.ToRadians(rotationAngle);
        }
        // We make sure we get the direction of the vector
        movement = Math.Normalize(movement);
        
        // We apply the actions to the object
        this.Owner.Transform.Translation += movement * event.Dt * speed;
        this.Owner.Transform.RotateAnglesWorld(rotationAngles * event.Dt);
    }
}
