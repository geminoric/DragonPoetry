class TextEffects : ZilchComponent
{
    var RandGen : Random;
    // Variables
    var SpinSpeed : Real = 0;
    var SkewSpeed : Real = 0;
    var ColorChangeSpeed : Real = 0;
    
    // Stats
    var TextAngle : Real = 0;
    var SpinDir : Integer = 1; // -1 Left, 1 Right
    var SkewDirX : Integer = 1; // -1 Smaller, 1 Bigger
    var SkewDirY : Integer = -1; // -1 Smaller, 1 Bigger
    
    function Initialize(init : CogInitializer)
    {
        this.RandGen = new Random();
        
        this.SpinSpeed = this.RandGen.Range(0, 0.005);
        this.SkewSpeed = this.RandGen.Range(0, 0.005);
        this.ColorChangeSpeed = this.RandGen.Range(0, 0.05);
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Spin();
        this.Skew();
    }
    
    function Spin()
    {
        if ( this.SpinDir == 1 )
        {
            this.TextAngle += this.SpinSpeed;
        }
        else
        {
            this.TextAngle -= this.SpinSpeed;
        }
        
        this.Owner.Transform.Rotation = Math.ToQuaternion(Real3(0, 0, 1), this.TextAngle);
        
        if ( Math.Abs(this.TextAngle) >= 0.5 )
        {
            this.SpinDir *= -1;
        }
    }
    
    function Skew()
    {
        var newScale = Real3(0, 0, 0);
        
        if ( this.SkewDirX == 1 )
        {
            newScale.X = this.SkewSpeed;
        }
        else
        {
            newScale.X = -this.SkewSpeed;
        }
        
        if ( this.SkewDirY == 1 )
        {
            newScale.Y = this.SkewSpeed;
        }
        else
        {
            newScale.Y = -this.SkewSpeed;
        }
        
        this.Owner.Transform.Scale += newScale;
        
        if ( this.Owner.Transform.Scale.X > 1.5 || this.Owner.Transform.Scale.X < 0.5 )
        {
            this.SkewDirX *= -1;
        }
        if ( this.Owner.Transform.Scale.Y > 1.5 || this.Owner.Transform.Scale.Y < 0.75 )
        {
            this.SkewDirY *= -1;
        }
    }
}
